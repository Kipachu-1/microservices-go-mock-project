// protos/product.proto
syntax = "proto3";

package product;

option go_package = "microservices-project/protos/productpb"; // Adjust to your go module path

import "google/protobuf/timestamp.proto";

// Product message
message Product {
  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4;       // Using double for price, could also use string for precision with decimal libraries
  int32 stock_quantity = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// Requests & Responses for CreateProduct
message CreateProductRequest {
  string name = 1;
  string description = 2;
  double price = 3;
  int32 stock_quantity = 4;
}

message CreateProductResponse {
  Product product = 1;
}

// Requests & Responses for GetProduct
message GetProductRequest {
  string product_id = 1;
}

message GetProductResponse {
  Product product = 1;
}

// Requests & Responses for ListProducts
message ListProductsRequest {
  int32 page_size = 1; // For pagination
  string page_token = 2; // For pagination
}

message ListProductsResponse {
  repeated Product products = 1;
  string next_page_token = 2; // For pagination
}

// Requests & Responses for UpdateProduct
message UpdateProductRequest {
  string product_id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  int32 stock_quantity = 5; // Can be used to directly set stock
}

message UpdateProductResponse {
  Product product = 1;
}

// Requests & Responses for DeleteProduct
message DeleteProductRequest {
  string product_id = 1;
}

message DeleteProductResponse {
  string message = 1; // e.g., "Product deleted successfully"
}

// For stock updates (could be used by OrderService)
message UpdateStockRequest {
    string product_id = 1;
    int32 quantity_change = 2; // Positive to increase stock, negative to decrease
}

message UpdateStockResponse {
    Product product = 1; // Return the updated product
}


// ProductService definition
service ProductService {
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
  rpc GetProduct(GetProductRequest) returns (GetProductResponse);
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse);
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);
  rpc UpdateStock(UpdateStockRequest) returns (UpdateStockResponse); // Used internally by OrderService or for admin
}